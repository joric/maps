{
  Pip-boy Map Markers Export for xEdit by Joric (c) 2024
  Hotkey: Ctrl+Shift+D
}

unit UserScript;

uses SysUtils;

procedure SaveXYZ(ChildObj: TJsonObject; ref: IInterface; path: string);
var data: TJsonObject;
begin
  ChildObj.Add(GetElementNativeValues(ref, path + '\X'));
  ChildObj.Add(GetElementNativeValues(ref, path + '\Y'));
  ChildObj.Add(GetElementNativeValues(ref, path + '\Z'));
end;

procedure AddItem(Obj, ChildObj: TJsonObject; ref: IInterface; section: string);
var
  ref_id: string;
  i: integer;
  item, items: IInterface;
  key: string;
begin
  ref_id := IntToHex(GetLoadOrderFormID(ref), 8);
  ChildObj.O['properties'].A[section].Add(ref_id);
  Obj.O[section].O[ref_id].S['editor_id'] := EditorID(ref);
  if GetElementEditValues(ref, 'FULL') <> '' then
    Obj.O[section].O[ref_id].S['name'] := GetElementEditValues(ref, 'FULL');
  if GetElementEditValues(ref, 'DESC') <> '' then
    Obj.O[section].O[ref_id].S['description'] := GetElementEditValues(ref, 'DESC');

  if section = 'quests' then begin
    items := ElementByName(ref, 'Objectives');
    if Assigned(items) then begin
      for i := 0 to Pred(ElementCount(items)) do begin
        item := ElementByIndex(items, i);
        key := GetElementEditValues(item, 'QOBJ');
        Obj.O[section].O[ref_id].O['objectives'].S[key] := GetElementEditValues(item, 'NNAM');
      end;
    end;
  end;

end;

function Finalize: integer;
var
  i, j, k, w, count, quests, q, value, cnt, subcount, fid: integer;
  f, mod_f, g, e, r, area, cell, refs, ref, item, items: IInterface;
  Obj, ChildObj: TJsonObject;
  s, id, section: string;
  sList: TStringList;
begin
  mod_f := FileByIndex(8);
  count := 0;

  Obj := TJsonObject.Create;
  Obj.S['type'] := 'FeatureCollection';

  r := RecordByFormID(FileByIndex(0), $00000010, False);
  for i := 0 to Pred(ReferencedByCount(r)) do begin
    e := ReferencedByIndex(r, i);
    if GetFile(e) <> mod_f then continue;
    cell := LinksTo(ElementByName(e, 'Cell'));

    ChildObj := Obj.A['features'].AddObject;
    ChildObj.S['type'] := 'Feature';
    ChildObj.O['geometry'].S['type'] := 'Point';

    SaveXYZ(ChildObj.O['geometry'].A['coordinates'], e, 'DATA\Position');

    ChildObj.O['properties'].S['title'] := GetElementEditValues(e, 'Map Marker\FULL');
    ChildObj.O['properties'].S['description'] := GetElementEditValues(e, 'Map Marker\TNAM\Type');
    ChildObj.O['properties'].S['ref_id'] := IntToHex(GetLoadOrderFormID(e), 8);
    ChildObj.O['properties'].S['form_id'] := IntToHex(GetLoadOrderFormID(r), 8);

    area := LinksTo(ElementByName(cell, 'Worldspace'));
    if Assigned(area) then begin
      ChildObj.O['properties'].S['area'] := EditorID(area);
    end;
  end;

  sList := TStringList.Create;
  sList.DelimitedText := 'KEYM CONT DOOR NPC_ ARMO BOOK MISC ALCH WEAP AMMO NOTE FLOR FURN ACTI';

  for k := 0 to Pred(sList.Count) do begin
    subcount := 0;
    for w := 0 to Pred(FileCount) do begin
      f := FileByIndex(w);
      g := GroupBySignature(f, sList[k]);
      for j := 0 to Pred(ElementCount(g)) do begin
        r := ElementByIndex(g, j);
        for i := 0 to Pred(ReferencedByCount(r)) do begin
          e := ReferencedByIndex(r, i);
          s := EditorID(r);
          fid := GetLoadOrderFormID(e);

          if (Signature(r) = 'DOOR') and (Signature(e) = 'REFR') then begin
            id: = IntToHex(GetLoadOrderFormID(e), 8);
            ref := WinningOverride(LinksTo(ElementByPath(e, 'XTEL\Door')));
            if not Assigned(ref) then continue;
//          end else if f<>mod_f then begin
//            continue;
          end else if (Signature(r) = 'ARMO') and (Signature(e) = 'REFR') then begin
          end else if (Signature(r) = 'KEYM') and (Signature(e) = 'REFR') then begin
          end else if (Signature(r) = 'ACTI') and (Signature(e) = 'REFR') then begin
            if (pos('Folon_ACTI_CutethulhuDollActivator', s) = 0)
            and (pos('FOLON_ACTI_LQLondon100', s) = 0)
            and (pos('Folon_ACTI_BarryBoatBeacon', s) = 0)
            and (pos('DN011OverdueBookVendMachine', s) = 0) // overdue book terminal
            and (pos('Folon_ACTI_TaxiActivatorFT', s) = 0)
            and (pos('loot_capsStash_tin', s) = 0) // ticket stash
            then continue;
          end else if (Signature(r) = 'FURN') and (Signature(e) = 'REFR') then begin
            if (pos('Folon_Workbench', s) = 0) then continue;
          end else if (Signature(r) = 'CONT') and (Signature(e) = 'REFR') then begin
          end else if (Signature(r) = 'NOTE') and (Signature(e) = 'REFR') then begin
          end else if (Signature(r) = 'FLOR') and (Signature(e) = 'REFR') then begin
            if (pos('WildMutfruit', s) = 0) then continue;
          end else if (Signature(r) = 'AMMO') and (Signature(e) = 'REFR') then begin
          end else if (Signature(r) = 'WEAP') and (Signature(e) = 'REFR') then begin
          end else if (Signature(r) = 'ALCH') and (Signature(e) = 'REFR') then begin
            if (pos('RadX', s) = 0)
            and (pos('Buffout', s) = 0)
            and (pos('Med-X', s) = 0)
            and (pos('Psycho', s) = 0)
            and (pos('Mentats', s) = 0)
            and (pos('Overdrive', s) = 0)
            and (pos('XCell', s) = 0)
            and (pos('UltraJet', s) = 0)
            and (pos('Folon_FoodDog', s) = 0)
            and (pos('Folon_DrinksUnique', s) = 0)
            then continue;
          end else if (Signature(r) = 'MISC') and (Signature(e) = 'REFR') then begin
            if (pos('VinylRecord', s) = 0)
            and (pos('BobbleHead_', s) = 0)
            and (pos('Folon_MiscCuteThulhu', s) = 0)
            and (pos('Folon_MiscCard', s) = 0)
            and (pos('Folon_MiscFeatherPeacock', s) = 0)
            and (pos('FOLON_MiscHymnBook', s) = 0) // Welcome to the Vagabonds
            and (s <> 'OverdueBook') // Overdue Book
            then continue;
          end else if (Signature(r) = 'BOOK') and (Signature(e) = 'REFR') then begin
            if (GetFile(r) <> mod_f) // exclude all non-london book references
              then continue;
          end else if (Signature(r) = 'NPC_') and (Signature(e) = 'ACHR') then begin
            if pos('_NPC_', s) = 0 then continue;
            quests := 0;
            for q := 0 to Pred(ReferencedByCount(r)) do begin
              ref := ReferencedByIndex(r, q);
              if Signature(ref) = 'QUST' then begin
                Inc(quests);
                break;
              end;
            end;
            if (quests = 0)
            and (fid <> $072e605f) // Private Tiffany (arms vendor, 072e605f)
            and (fid <> $072e6087) // Corporal Rafferty (food vendor, 072e6087)
            then continue;
          end else continue;

          // only local objects allowed
          if GetFile(e) <> mod_f then continue;

          if (Signature(r) = 'CONT') and (pos('Folon_SettlementWorkbench', s) = 0) then begin
            cnt := 0;
            items := ElementByName(r, 'Items');
            if Assigned(items) then begin
              for q := ElementCount(items) - 1 downto 0 do begin
                item := ElementByIndex(items, q);
                ref := LinksTo(ElementByPath(item, 'CNTO\Item'));
                if Signature(ref) = 'WEAP' then begin
                  Inc(cnt);
                end;
              end;
            end;
            if cnt = 0 then continue;
          end;

          ChildObj := Obj.A['features'].AddObject;
          ChildObj.S['type'] := 'Feature';
          ChildObj.O['geometry'].S['type'] := 'Point';

          SaveXYZ(ChildObj.O['geometry'].A['coordinates'], e, 'DATA\Position');

          ChildObj.O['properties'].S['title'] := GetElementEditValues(r, 'FULL');
          ChildObj.O['properties'].S['description'] := Signature(r);
          ChildObj.O['properties'].S['ref_id'] := IntToHex(GetLoadOrderFormID(e), 8);
          ChildObj.O['properties'].S['form_id'] := IntToHex(GetLoadOrderFormID(r), 8);
          ChildObj.O['properties'].S['editor_id'] := EditorID(r);

          if (Signature(r) = 'DOOR') then begin

            ref := WinningOverride(LinksTo(ElementByPath(e, 'XTEL\Door')));
            if Assigned(ref) then begin
              ChildObj.O['properties'].S['other_door'] := IntToHex(GetLoadOrderFormID(ref), 8);

              cell := LinksTo(ElementByName(ref, 'Cell'));
              if GetElementNativeValues(cell, 'DATA\Is Interior Cell') then begin
                ChildObj.O['properties'].S['door_cell'] := IntToHex(GetLoadOrderFormID(cell), 8);
                ChildObj.O['properties'].S['door_name'] := GetElementEditValues(cell, 'FULL');
              end;

              area := LinksTo(ElementByName(cell, 'Worldspace'));
              if Assigned(area) then begin
                ChildObj.O['properties'].S['door_area'] := EditorID(area);
              end;

              SaveXYZ(ChildObj.O['properties'].A['position'], e, 'XTEL\Position/Rotation\Position');
              SaveXYZ(ChildObj.O['properties'].A['rotation'], e, 'XTEL\Position/Rotation\Rotation');

            end;
          end;

          // quests assigned to ref id
          quests := 0;
          for q := 0 to Pred(ReferencedByCount(r)) do begin
            ref := ReferencedByIndex(r, q);
            if Signature(ref) = 'QUST' then begin
              AddItem(Obj, ChildObj, ref, 'quests');
              Inc(quests);
            end;
          end;

          // quests assigned to form id
          if quests = 0 then begin
            for q := 0 to Pred(ReferencedByCount(e)) do begin
              ref := ReferencedByIndex(e, q);
              if Signature(ref) = 'QUST' then begin
                AddItem(Obj, ChildObj, ref, 'quests');
              end;
            end;
          end;

          items := ElementByName(r, 'Items');
          if Assigned(items) then begin
            for q := ElementCount(items) - 1 downto 0 do begin
              item := ElementByIndex(items, q);
              ref := LinksTo(ElementByPath(item, 'CNTO\Item'));
              if Signature(ref) = 'WEAP' then begin
                AddItem(Obj, ChildObj, ref, 'weapons');
              end;
            end;
          end;

          ref := LinksTo(ElementByPath(r, 'DOFT'));
          if Assigned(ref) then begin
            items := ElementByPath(ref, 'INAM');
            for q := ElementCount(items) - 1 downto 0 do begin
              item := ElementByIndex(items, q);
              AddItem(Obj, ChildObj, LinksTo(item), 'outfits');
            end;
          end;

          value := GetElementNativeValues(r, 'DATA\Value');
          if value <> 0 then begin
            ChildObj.O['properties'].I['value'] := value;
          end;

          ref := LinksTo(ElementByPath(r, 'DNAM\Perk'));
          if Assigned(ref) then begin
            AddItem(Obj, ChildObj, ref, 'perks');
          end;

          cell := LinksTo(ElementByName(e, 'Cell'));
          if GetElementNativeValues(cell, 'DATA\Is Interior Cell') then begin
            ChildObj.O['properties'].S['cell'] := IntToHex(GetLoadOrderFormID(cell), 8);
            ChildObj.O['properties'].S['cell_name'] := GetElementEditValues(cell, 'FULL');
          end;

          area := LinksTo(ElementByName(cell, 'Worldspace'));
          if Assigned(area) then begin
            ChildObj.O['properties'].S['area'] := EditorID(area);
          end;

          Inc(subcount);
          Inc(count);
        end;
      end;
    end;
    AddMessage(Format('Collected %s - %d items', [sList[k], subcount]));
  end;

  g := GroupBySignature(mod_f, 'WRLD');
  for j := 0 to Pred(ElementCount(g)) do begin
    e := ElementByIndex(g, j);
    if IsMaster(e) then begin
      ChildObj := Obj.O['worldspaces'].O[EditorID(e)];
      ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(e), 8);
      ChildObj['title'] := GetElementEditValues(e, 'FULL');
      ChildObj.F['scale'] := GetElementNativeValues(e, 'ONAM\World Map Scale');
      ChildObj.A['offset'].Add(GetElementNativeValues(e, 'ONAM\Cell X Offset'));
      ChildObj.A['offset'].Add(GetElementNativeValues(e, 'ONAM\Cell Y Offset'));
      ChildObj.A['offset'].Add(GetElementNativeValues(e, 'ONAM\Cell Z Offset'));
    end;
  end;
  AddMessage(Format('Collected %d items', [count]));

  AddMessage('Saving markers.json...');
  Obj.SaveToFile(extractfilepath(paramstr(0)) + '../markers.json', False, TEncoding.UTF8, True);

end;

end.
